{"version":3,"sources":["../../../next-server/server/config-utils.ts"],"names":["installed","install","useWebpack5","require","shouldLoadWithWebpack5","phase","dir","PHASE_DEVELOPMENT_SERVER","Log","path","CONFIG_FILE","cwd","Number","process","env","NEXT_PRIVATE_TEST_WEBPACK5_MODE","enabled","reason","length","userConfigModule","userConfig","default","future","webpack5","reasonMessage","loadWebpackHook","worker","Worker","__filename","enableWorkerThreads","result","info","Boolean","end"],"mappings":"2JAAA,8BACA,uCACA,0EACA,2DACA,2CACA,6CACA,mE,w4BAEA,GAAIA,CAAAA,SAAkB,CAAG,KAAzB,CAEO,QAASC,CAAAA,OAAT,CAAiBC,WAAjB,CAAuC,CAC5C,GAAIF,SAAJ,CAAe,CACb,OACD,CACDA,SAAS,CAAG,IAAZ,CAEA,kBAAYE,WAAZ,EAEA;AACA;AACAC,OAAO,CAAC,kCAAD,CAAP,CACD,CAeM,cAAeC,CAAAA,sBAAf,CACLC,KADK,CAELC,GAFK,CAGiB,wBACtB,KAAM,uBAAcA,GAAd,CAAmBD,KAAK,GAAKE,mCAA7B,CAAuDC,GAAvD,CAAN,CAEA,KAAMC,CAAAA,IAAI,CAAG,KAAM,oBAAOC,sBAAP,CAAoB,CACrCC,GAAG,CAAEL,GADgC,CAApB,CAAnB,CAIA,GAAIM,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,+BAAb,CAAN,CAAsD,CAA1D,CAA6D,CAC3D,MAAO,CACLC,OAAO,CAAE,IADJ,CAELC,MAAM,CAAE,WAFH,CAAP,CAID,CAED;AACA,GAAI,EAACR,IAAD,QAACA,IAAI,CAAES,MAAP,CAAJ,CAAmB,CACjB;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,CACLF,OAAO,CAAE,KADJ,CAELC,MAAM,CAAE,gBAFH,CAAP,CAID,CAED;AACAhB,OAAO,CAAC,KAAD,CAAP,CAEA,KAAMkB,CAAAA,gBAAgB,CAAGhB,OAAO,CAACM,IAAD,CAAhC,CACA,KAAMW,CAAAA,UAA+B,CAAG,kCACtCf,KADsC,CAEtCc,gBAAgB,CAACE,OAAjB,EAA4BF,gBAFU,CAAxC,CAKA;AACA,GAAI,qBAAAC,UAAU,CAACE,MAAX,kCAAmBC,QAAnB,IAAgC,IAApC,CAA0C,CACxC,MAAO,CACLP,OAAO,CAAE,IADJ,CAELC,MAAM,CAAE,aAFH,CAAP,CAID,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,MAAO,CACLD,OAAO,CAAE,KADJ,CAELC,MAAM,CAAE,gBAFH,CAAP,CAID,CAED,QAASO,CAAAA,aAAT,CAAuBP,MAAvB,CAA6C,CAC3C,OAAQA,MAAR,EACE,IAAK,aAAL,CACE,MAAO,gCAAP,CACF,IAAK,gBAAL,CACE,MAAO,oCAAP,CACF,IAAK,WAAL,CACE,MAAO,mBAAP,CACF,IAAK,gBAAL,CACE,MAAO,gDAAP,CACF,IAAK,mBAAL,CACE,MAAO,mDAAP,CACF,IAAK,WAAL,CACE,MAAO,oBAAP,CACF,QACE,MAAO,EAAP,CAdJ,CAgBD,CAEM,cAAeQ,CAAAA,eAAf,CAA+BpB,KAA/B,CAA8CC,GAA9C,CAA2D,CAChE,GAAIJ,CAAAA,WAAW,CAAG,KAAlB,CACA,KAAMwB,CAAAA,MAAW,CAAG,GAAIC,mBAAJ,CAAWC,UAAX,CAAuB,CAAEC,mBAAmB,CAAE,KAAvB,CAAvB,CAApB,CACA,GAAI,CACF,KAAMC,CAAAA,MAAmB,CAAG,KAAMJ,CAAAA,MAAM,CAACtB,sBAAP,CAA8BC,KAA9B,CAAqCC,GAArC,CAAlC,CACAE,GAAG,CAACuB,IAAJ,CACG,iBAAgBD,MAAM,CAACd,OAAP,CAAiB,GAAjB,CAAuB,GAAI,aAAYQ,aAAa,CACnEM,MAAM,CAACb,MAD4D,CAEnE,4CAHJ,EAKAf,WAAW,CAAG8B,OAAO,CAACF,MAAM,CAACd,OAAR,CAArB,CACD,CAAC,cAAM,CACN;AACA;AACD,CAXD,OAWU,CACRU,MAAM,CAACO,GAAP,GACD,CAEDhC,OAAO,CAACC,WAAD,CAAP,CACD","sourcesContent":["import { loadEnvConfig } from '@next/env'\nimport { Worker } from 'jest-worker'\nimport findUp from 'next/dist/compiled/find-up'\nimport { init as initWebpack } from 'next/dist/compiled/webpack/webpack'\nimport { CONFIG_FILE, PHASE_DEVELOPMENT_SERVER } from '../lib/constants'\nimport { NextConfig, normalizeConfig } from './config-shared'\nimport * as Log from '../../build/output/log'\n\nlet installed: boolean = false\n\nexport function install(useWebpack5: boolean) {\n  if (installed) {\n    return\n  }\n  installed = true\n\n  initWebpack(useWebpack5)\n\n  // hook the Node.js require so that webpack requires are\n  // routed to the bundled and now initialized webpack version\n  require('../../build/webpack/require-hook')\n}\n\ntype CheckReasons =\n  | 'test-mode'\n  | 'no-config'\n  | 'future-flag'\n  | 'no-future-flag'\n  | 'no-webpack-config'\n  | 'webpack-config'\n\ntype CheckResult = {\n  enabled: boolean\n  reason: CheckReasons\n}\n\nexport async function shouldLoadWithWebpack5(\n  phase: string,\n  dir: string\n): Promise<CheckResult> {\n  await loadEnvConfig(dir, phase === PHASE_DEVELOPMENT_SERVER, Log)\n\n  const path = await findUp(CONFIG_FILE, {\n    cwd: dir,\n  })\n\n  if (Number(process.env.NEXT_PRIVATE_TEST_WEBPACK5_MODE) > 0) {\n    return {\n      enabled: true,\n      reason: 'test-mode',\n    }\n  }\n\n  // No `next.config.js`:\n  if (!path?.length) {\n    // Uncomment to add auto-enable when there is no next.config.js\n    // Use webpack 5 by default in new apps:\n    // return {\n    //   enabled: true,\n    //   reason: 'no-config',\n    // }\n    return {\n      enabled: false,\n      reason: 'no-future-flag',\n    }\n  }\n\n  // Default to webpack 4 for backwards compatibility on boot:\n  install(false)\n\n  const userConfigModule = require(path)\n  const userConfig: Partial<NextConfig> = normalizeConfig(\n    phase,\n    userConfigModule.default || userConfigModule\n  )\n\n  // Opted-in manually\n  if (userConfig.future?.webpack5 === true) {\n    return {\n      enabled: true,\n      reason: 'future-flag',\n    }\n  }\n\n  // Uncomment to add auto-enable when there is no custom webpack config\n  // The user isn't configuring webpack\n  // if (!userConfig.webpack) {\n  //   return {\n  //     enabled: true,\n  //     reason: 'no-webpack-config',\n  //   }\n  // }\n\n  // return {\n  //   enabled: false,\n  //   reason: 'webpack-config',\n  // }\n  return {\n    enabled: false,\n    reason: 'no-future-flag',\n  }\n}\n\nfunction reasonMessage(reason: CheckReasons) {\n  switch (reason) {\n    case 'future-flag':\n      return 'future.webpack5 option enabled'\n    case 'no-future-flag':\n      return 'future.webpack5 option not enabled'\n    case 'no-config':\n      return 'no next.config.js'\n    case 'webpack-config':\n      return 'custom webpack configuration in next.config.js'\n    case 'no-webpack-config':\n      return 'no custom webpack configuration in next.config.js'\n    case 'test-mode':\n      return 'internal test mode'\n    default:\n      return ''\n  }\n}\n\nexport async function loadWebpackHook(phase: string, dir: string) {\n  let useWebpack5 = false\n  const worker: any = new Worker(__filename, { enableWorkerThreads: false })\n  try {\n    const result: CheckResult = await worker.shouldLoadWithWebpack5(phase, dir)\n    Log.info(\n      `Using webpack ${result.enabled ? '5' : '4'}. Reason: ${reasonMessage(\n        result.reason\n      )} https://nextjs.org/docs/messages/webpack5`\n    )\n    useWebpack5 = Boolean(result.enabled)\n  } catch {\n    // If this errors, it likely will do so again upon boot, so we just swallow\n    // it here.\n  } finally {\n    worker.end()\n  }\n\n  install(useWebpack5)\n}\n"]}